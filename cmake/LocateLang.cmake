macro(__efl_assert_propagate __var)
  set(${__var} ${${__var}} PARENT_SCOPE)
endmacro()

function(__efl_assert_find_lang __lang)
  if(NOT DEFINED __EFL_ASSERT_SCRIPT_LANG AND NOT ${__lang}_FOUND)
    find_package(${__lang} QUIET)
    if(${__lang}_FOUND)
      set(__EFL_ASSERT_SCRIPT_LANG ${__lang} PARENT_SCOPE)
      if(NOT ("${__lang}" STREQUAL "Python"))
        string(TOUPPER "${__lang}" __EFL_ASSERT_SL)
      else()
        set(__EFL_ASSERT_SL "${__lang}")
      endif()
      __efl_assert_propagate(__EFL_ASSERT_SL)
      if(NOT DEFINED ${__EFL_ASSERT_SL}_VERSION)
        set(${__EFL_ASSERT_SL}_VERSION 
          ${${__EFL_ASSERT_SL}_VERSION_STRING})
      endif()
      __efl_assert_propagate(${__EFL_ASSERT_SL}_VERSION)
      __efl_assert_propagate(${__EFL_ASSERT_SL}_EXECUTABLE)
    endif()
  endif()
endfunction()

macro(__efl_assert_find_any)
  foreach(__lang ${ARGN})
    __efl_assert_find_lang(${__lang})
    if(DEFINED __EFL_ASSERT_SCRIPT_LANG)
      break()
    endif()
  endforeach()
endmacro()

macro(__efl_assert_purge_lang __lang)
  unset(${__EFL_ASSERT_SCRIPT_LANG}_FOUND CACHE)
  unset(__EFL_ASSERT_SCRIPT_LANG CACHE)
  unset(__EFL_ASSERT_SCRIPT_EXE CACHE)
endmacro()